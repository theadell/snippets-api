// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package gen

import (
	"context"
	"database/sql"
	"time"
)

const createSnippet = `-- name: CreateSnippet :one
WITH new_snippet AS (
    INSERT INTO snippets (
        title, 
        expires_at, 
        password_hash, 
        edit_token
    ) VALUES (
        $1, $2, $3, $4
    )
    RETURNING id, public_id, created_at, edit_token
)
INSERT INTO snippet_contents (
    snippet_id,
    content_type,
    encrypted_content
) 
SELECT 
    id, $5, $6
FROM new_snippet
RETURNING snippet_id,
          (SELECT public_id FROM new_snippet),
          (SELECT created_at FROM new_snippet),
          (SELECT edit_token FROM new_snippet)
`

type CreateSnippetParams struct {
	Title            sql.NullString
	ExpiresAt        sql.NullTime
	PasswordHash     sql.NullString
	EditToken        string
	ContentType      string
	EncryptedContent []byte
}

type CreateSnippetRow struct {
	SnippetID int32
	PublicID  string
	CreatedAt time.Time
	EditToken string
}

// Creates a new snippet
func (q *Queries) CreateSnippet(ctx context.Context, arg CreateSnippetParams) (CreateSnippetRow, error) {
	row := q.db.QueryRowContext(ctx, createSnippet,
		arg.Title,
		arg.ExpiresAt,
		arg.PasswordHash,
		arg.EditToken,
		arg.ContentType,
		arg.EncryptedContent,
	)
	var i CreateSnippetRow
	err := row.Scan(
		&i.SnippetID,
		&i.PublicID,
		&i.CreatedAt,
		&i.EditToken,
	)
	return i, err
}

const deleteExpiredSnippets = `-- name: DeleteExpiredSnippets :execrows
DELETE FROM snippets
WHERE expires_at IS NOT NULL AND expires_at < NOW()
`

// Deletes all snippets that have expired
func (q *Queries) DeleteExpiredSnippets(ctx context.Context) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteExpiredSnippets)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteSnippetById = `-- name: DeleteSnippetById :execrows
DELETE FROM snippets 
WHERE id = $1
`

// Deletes a snippet by id
func (q *Queries) DeleteSnippetById(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteSnippetById, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getSnippetByPublicID = `-- name: GetSnippetByPublicID :one
SELECT s.id, s.public_id, s.title, s.created_at, s.expires_at, s.password_hash, s.edit_token, s.view_count, s.last_edited_at,
       c.content_type, c.encrypted_content
FROM snippets s
JOIN snippet_contents c ON s.id = c.snippet_id
WHERE s.public_id = $1 
LIMIT 1
`

type GetSnippetByPublicIDRow struct {
	ID               int32
	PublicID         string
	Title            sql.NullString
	CreatedAt        time.Time
	ExpiresAt        sql.NullTime
	PasswordHash     sql.NullString
	EditToken        string
	ViewCount        int32
	LastEditedAt     sql.NullTime
	ContentType      string
	EncryptedContent []byte
}

// Retrieves a snippet by its public ID
func (q *Queries) GetSnippetByPublicID(ctx context.Context, publicID string) (GetSnippetByPublicIDRow, error) {
	row := q.db.QueryRowContext(ctx, getSnippetByPublicID, publicID)
	var i GetSnippetByPublicIDRow
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Title,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.PasswordHash,
		&i.EditToken,
		&i.ViewCount,
		&i.LastEditedAt,
		&i.ContentType,
		&i.EncryptedContent,
	)
	return i, err
}

const incrementSnippetViewCount = `-- name: IncrementSnippetViewCount :one
UPDATE snippets
SET view_count = view_count + 1
WHERE id = $1
RETURNING view_count
`

// Increments the view count for a snippet
func (q *Queries) IncrementSnippetViewCount(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, incrementSnippetViewCount, id)
	var view_count int32
	err := row.Scan(&view_count)
	return view_count, err
}

const listRecentSnippets = `-- name: ListRecentSnippets :many
SELECT s.id, s.public_id, s.title, s.created_at, s.expires_at 
FROM snippets s
ORDER BY s.created_at DESC
LIMIT $1
`

type ListRecentSnippetsRow struct {
	ID        int32
	PublicID  string
	Title     sql.NullString
	CreatedAt time.Time
	ExpiresAt sql.NullTime
}

// Lists recently created snippets (for admin purposes)
func (q *Queries) ListRecentSnippets(ctx context.Context, limit int32) ([]ListRecentSnippetsRow, error) {
	rows, err := q.db.QueryContext(ctx, listRecentSnippets, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRecentSnippetsRow
	for rows.Next() {
		var i ListRecentSnippetsRow
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Title,
			&i.CreatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSnippet = `-- name: UpdateSnippet :one
UPDATE snippets
SET 
    title = COALESCE($2, title),
    expires_at = COALESCE($3, expires_at),
    password_hash = COALESCE($4, password_hash),
    last_edited_at = NOW()
WHERE id = $1
RETURNING id, public_id, created_at, last_edited_at
`

type UpdateSnippetParams struct {
	ID           int32
	Title        sql.NullString
	ExpiresAt    sql.NullTime
	PasswordHash sql.NullString
}

type UpdateSnippetRow struct {
	ID           int32
	PublicID     string
	CreatedAt    time.Time
	LastEditedAt sql.NullTime
}

// Updates an existing snippet by ID
func (q *Queries) UpdateSnippet(ctx context.Context, arg UpdateSnippetParams) (UpdateSnippetRow, error) {
	row := q.db.QueryRowContext(ctx, updateSnippet,
		arg.ID,
		arg.Title,
		arg.ExpiresAt,
		arg.PasswordHash,
	)
	var i UpdateSnippetRow
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.CreatedAt,
		&i.LastEditedAt,
	)
	return i, err
}

const updateSnippetContent = `-- name: UpdateSnippetContent :exec
UPDATE snippet_contents
SET 
    content_type = COALESCE($2, content_type),
    encrypted_content = COALESCE($3, encrypted_content)
WHERE snippet_id = $1
`

type UpdateSnippetContentParams struct {
	SnippetID        int32
	ContentType      string
	EncryptedContent []byte
}

// Updates the content of a snippet
func (q *Queries) UpdateSnippetContent(ctx context.Context, arg UpdateSnippetContentParams) error {
	_, err := q.db.ExecContext(ctx, updateSnippetContent, arg.SnippetID, arg.ContentType, arg.EncryptedContent)
	return err
}
