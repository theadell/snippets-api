// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"snippets.adelh.dev/app/internal/db/sqlc"
)

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// CreateSnippet provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateSnippet(ctx context.Context, arg sqlc.CreateSnippetParams) (sqlc.CreateSnippetRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateSnippet")
	}

	var r0 sqlc.CreateSnippetRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.CreateSnippetParams) (sqlc.CreateSnippetRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.CreateSnippetParams) sqlc.CreateSnippetRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(sqlc.CreateSnippetRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sqlc.CreateSnippetParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateSnippet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSnippet'
type MockQuerier_CreateSnippet_Call struct {
	*mock.Call
}

// CreateSnippet is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) CreateSnippet(ctx interface{}, arg interface{}) *MockQuerier_CreateSnippet_Call {
	return &MockQuerier_CreateSnippet_Call{Call: _e.mock.On("CreateSnippet", ctx, arg)}
}

func (_c *MockQuerier_CreateSnippet_Call) Run(run func(ctx context.Context, arg sqlc.CreateSnippetParams)) *MockQuerier_CreateSnippet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.CreateSnippetParams))
	})
	return _c
}

func (_c *MockQuerier_CreateSnippet_Call) Return(createSnippetRow sqlc.CreateSnippetRow, err error) *MockQuerier_CreateSnippet_Call {
	_c.Call.Return(createSnippetRow, err)
	return _c
}

func (_c *MockQuerier_CreateSnippet_Call) RunAndReturn(run func(ctx context.Context, arg sqlc.CreateSnippetParams) (sqlc.CreateSnippetRow, error)) *MockQuerier_CreateSnippet_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExpiredSnippets provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DeleteExpiredSnippets(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpiredSnippets")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_DeleteExpiredSnippets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpiredSnippets'
type MockQuerier_DeleteExpiredSnippets_Call struct {
	*mock.Call
}

// DeleteExpiredSnippets is a helper method to define mock.On call
//   - ctx
func (_e *MockQuerier_Expecter) DeleteExpiredSnippets(ctx interface{}) *MockQuerier_DeleteExpiredSnippets_Call {
	return &MockQuerier_DeleteExpiredSnippets_Call{Call: _e.mock.On("DeleteExpiredSnippets", ctx)}
}

func (_c *MockQuerier_DeleteExpiredSnippets_Call) Run(run func(ctx context.Context)) *MockQuerier_DeleteExpiredSnippets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerier_DeleteExpiredSnippets_Call) Return(n int64, err error) *MockQuerier_DeleteExpiredSnippets_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockQuerier_DeleteExpiredSnippets_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockQuerier_DeleteExpiredSnippets_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSnippetById provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DeleteSnippetById(ctx context.Context, id int32) (int64, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSnippetById")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) (int64, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) int64); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_DeleteSnippetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSnippetById'
type MockQuerier_DeleteSnippetById_Call struct {
	*mock.Call
}

// DeleteSnippetById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) DeleteSnippetById(ctx interface{}, id interface{}) *MockQuerier_DeleteSnippetById_Call {
	return &MockQuerier_DeleteSnippetById_Call{Call: _e.mock.On("DeleteSnippetById", ctx, id)}
}

func (_c *MockQuerier_DeleteSnippetById_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_DeleteSnippetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_DeleteSnippetById_Call) Return(n int64, err error) *MockQuerier_DeleteSnippetById_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockQuerier_DeleteSnippetById_Call) RunAndReturn(run func(ctx context.Context, id int32) (int64, error)) *MockQuerier_DeleteSnippetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetSnippetByPublicID provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetSnippetByPublicID(ctx context.Context, publicID string) (sqlc.GetSnippetByPublicIDRow, error) {
	ret := _mock.Called(ctx, publicID)

	if len(ret) == 0 {
		panic("no return value specified for GetSnippetByPublicID")
	}

	var r0 sqlc.GetSnippetByPublicIDRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (sqlc.GetSnippetByPublicIDRow, error)); ok {
		return returnFunc(ctx, publicID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) sqlc.GetSnippetByPublicIDRow); ok {
		r0 = returnFunc(ctx, publicID)
	} else {
		r0 = ret.Get(0).(sqlc.GetSnippetByPublicIDRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, publicID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetSnippetByPublicID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSnippetByPublicID'
type MockQuerier_GetSnippetByPublicID_Call struct {
	*mock.Call
}

// GetSnippetByPublicID is a helper method to define mock.On call
//   - ctx
//   - publicID
func (_e *MockQuerier_Expecter) GetSnippetByPublicID(ctx interface{}, publicID interface{}) *MockQuerier_GetSnippetByPublicID_Call {
	return &MockQuerier_GetSnippetByPublicID_Call{Call: _e.mock.On("GetSnippetByPublicID", ctx, publicID)}
}

func (_c *MockQuerier_GetSnippetByPublicID_Call) Run(run func(ctx context.Context, publicID string)) *MockQuerier_GetSnippetByPublicID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetSnippetByPublicID_Call) Return(getSnippetByPublicIDRow sqlc.GetSnippetByPublicIDRow, err error) *MockQuerier_GetSnippetByPublicID_Call {
	_c.Call.Return(getSnippetByPublicIDRow, err)
	return _c
}

func (_c *MockQuerier_GetSnippetByPublicID_Call) RunAndReturn(run func(ctx context.Context, publicID string) (sqlc.GetSnippetByPublicIDRow, error)) *MockQuerier_GetSnippetByPublicID_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementSnippetViewCount provides a mock function for the type MockQuerier
func (_mock *MockQuerier) IncrementSnippetViewCount(ctx context.Context, id int32) (int32, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IncrementSnippetViewCount")
	}

	var r0 int32
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) (int32, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) int32); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(int32)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_IncrementSnippetViewCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementSnippetViewCount'
type MockQuerier_IncrementSnippetViewCount_Call struct {
	*mock.Call
}

// IncrementSnippetViewCount is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) IncrementSnippetViewCount(ctx interface{}, id interface{}) *MockQuerier_IncrementSnippetViewCount_Call {
	return &MockQuerier_IncrementSnippetViewCount_Call{Call: _e.mock.On("IncrementSnippetViewCount", ctx, id)}
}

func (_c *MockQuerier_IncrementSnippetViewCount_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_IncrementSnippetViewCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_IncrementSnippetViewCount_Call) Return(n int32, err error) *MockQuerier_IncrementSnippetViewCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockQuerier_IncrementSnippetViewCount_Call) RunAndReturn(run func(ctx context.Context, id int32) (int32, error)) *MockQuerier_IncrementSnippetViewCount_Call {
	_c.Call.Return(run)
	return _c
}

// ListRecentSnippets provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ListRecentSnippets(ctx context.Context, limit int32) ([]sqlc.ListRecentSnippetsRow, error) {
	ret := _mock.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for ListRecentSnippets")
	}

	var r0 []sqlc.ListRecentSnippetsRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) ([]sqlc.ListRecentSnippetsRow, error)); ok {
		return returnFunc(ctx, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) []sqlc.ListRecentSnippetsRow); ok {
		r0 = returnFunc(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlc.ListRecentSnippetsRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ListRecentSnippets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRecentSnippets'
type MockQuerier_ListRecentSnippets_Call struct {
	*mock.Call
}

// ListRecentSnippets is a helper method to define mock.On call
//   - ctx
//   - limit
func (_e *MockQuerier_Expecter) ListRecentSnippets(ctx interface{}, limit interface{}) *MockQuerier_ListRecentSnippets_Call {
	return &MockQuerier_ListRecentSnippets_Call{Call: _e.mock.On("ListRecentSnippets", ctx, limit)}
}

func (_c *MockQuerier_ListRecentSnippets_Call) Run(run func(ctx context.Context, limit int32)) *MockQuerier_ListRecentSnippets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_ListRecentSnippets_Call) Return(listRecentSnippetsRows []sqlc.ListRecentSnippetsRow, err error) *MockQuerier_ListRecentSnippets_Call {
	_c.Call.Return(listRecentSnippetsRows, err)
	return _c
}

func (_c *MockQuerier_ListRecentSnippets_Call) RunAndReturn(run func(ctx context.Context, limit int32) ([]sqlc.ListRecentSnippetsRow, error)) *MockQuerier_ListRecentSnippets_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSnippet provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UpdateSnippet(ctx context.Context, arg sqlc.UpdateSnippetParams) (sqlc.UpdateSnippetRow, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSnippet")
	}

	var r0 sqlc.UpdateSnippetRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.UpdateSnippetParams) (sqlc.UpdateSnippetRow, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.UpdateSnippetParams) sqlc.UpdateSnippetRow); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(sqlc.UpdateSnippetRow)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sqlc.UpdateSnippetParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_UpdateSnippet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSnippet'
type MockQuerier_UpdateSnippet_Call struct {
	*mock.Call
}

// UpdateSnippet is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) UpdateSnippet(ctx interface{}, arg interface{}) *MockQuerier_UpdateSnippet_Call {
	return &MockQuerier_UpdateSnippet_Call{Call: _e.mock.On("UpdateSnippet", ctx, arg)}
}

func (_c *MockQuerier_UpdateSnippet_Call) Run(run func(ctx context.Context, arg sqlc.UpdateSnippetParams)) *MockQuerier_UpdateSnippet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.UpdateSnippetParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateSnippet_Call) Return(updateSnippetRow sqlc.UpdateSnippetRow, err error) *MockQuerier_UpdateSnippet_Call {
	_c.Call.Return(updateSnippetRow, err)
	return _c
}

func (_c *MockQuerier_UpdateSnippet_Call) RunAndReturn(run func(ctx context.Context, arg sqlc.UpdateSnippetParams) (sqlc.UpdateSnippetRow, error)) *MockQuerier_UpdateSnippet_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSnippetContent provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UpdateSnippetContent(ctx context.Context, arg sqlc.UpdateSnippetContentParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSnippetContent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sqlc.UpdateSnippetContentParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_UpdateSnippetContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSnippetContent'
type MockQuerier_UpdateSnippetContent_Call struct {
	*mock.Call
}

// UpdateSnippetContent is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) UpdateSnippetContent(ctx interface{}, arg interface{}) *MockQuerier_UpdateSnippetContent_Call {
	return &MockQuerier_UpdateSnippetContent_Call{Call: _e.mock.On("UpdateSnippetContent", ctx, arg)}
}

func (_c *MockQuerier_UpdateSnippetContent_Call) Run(run func(ctx context.Context, arg sqlc.UpdateSnippetContentParams)) *MockQuerier_UpdateSnippetContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.UpdateSnippetContentParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateSnippetContent_Call) Return(err error) *MockQuerier_UpdateSnippetContent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_UpdateSnippetContent_Call) RunAndReturn(run func(ctx context.Context, arg sqlc.UpdateSnippetContentParams) error) *MockQuerier_UpdateSnippetContent_Call {
	_c.Call.Return(run)
	return _c
}
