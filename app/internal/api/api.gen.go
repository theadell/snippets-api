//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Error defines model for Error.
type Error struct {
	// Error Error type or category
	Error string `json:"error"`

	// Message Detailed error message
	Message string `json:"message"`

	// Path Request path that generated the error
	Path *string `json:"path,omitempty"`

	// Status HTTP status code
	Status int `json:"status"`

	// Timestamp When the error occurred
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// SnippetCreateRequest defines model for SnippetCreateRequest.
type SnippetCreateRequest struct {
	// Content The snippet content to store
	Content string `json:"content"`

	// ContentType optional content type
	ContentType *string `json:"contentType,omitempty"`

	// ExpiresIn Optional duration after which the snippet will expire
	ExpiresIn *string `json:"expiresIn,omitempty"`

	// Password Optional password for snippet protection
	Password *string `json:"password,omitempty"`

	// Title optional title for the snippet
	Title *string `json:"title,omitempty"`
}

// SnippetCreateResponse defines model for SnippetCreateResponse.
type SnippetCreateResponse struct {
	// EditToken secret token for editing snippet
	EditToken *string `json:"editToken,omitempty"`

	// ExpiresAt ISO 8601 timestamp when the snippet will expire (if applicable)
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Id Unique identifier for the snippet
	Id string `json:"id"`
}

// SnippetResponse defines model for SnippetResponse.
type SnippetResponse struct {
	// Content The decrypted snippet content
	Content string `json:"content"`

	// CreatedAt ISO 8601 timestamp when the snippet was created
	CreatedAt time.Time `json:"createdAt"`

	// ExpiresAt ISO 8601 timestamp when the snippet will expire (if applicable)
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Id Unique identifier for the snippet
	Id string `json:"id"`
}

// DeleteSnippetParams defines parameters for DeleteSnippet.
type DeleteSnippetParams struct {
	// XEditToken Edit token for deleting the snippet
	XEditToken string `json:"X-Edit-Token"`

	// XSnippetPassword Password for protected snippets
	XSnippetPassword *string `json:"X-Snippet-Password,omitempty"`
}

// GetSnippetParams defines parameters for GetSnippet.
type GetSnippetParams struct {
	// XSnippetPassword Password for protected snippets
	XSnippetPassword *string `json:"X-Snippet-Password,omitempty"`
}

// UpdateSnippetParams defines parameters for UpdateSnippet.
type UpdateSnippetParams struct {
	// XEditToken Edit token for updating the snippet
	XEditToken string `json:"X-Edit-Token"`

	// XSnippetPassword Password for protected snippets
	XSnippetPassword *string `json:"X-Snippet-Password,omitempty"`
}

// CreateSnippetJSONRequestBody defines body for CreateSnippet for application/json ContentType.
type CreateSnippetJSONRequestBody = SnippetCreateRequest

// UpdateSnippetJSONRequestBody defines body for UpdateSnippet for application/json ContentType.
type UpdateSnippetJSONRequestBody = SnippetCreateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// create a new snippet
	// (POST /snippets)
	CreateSnippet(w http.ResponseWriter, r *http.Request)
	// Delete a snippet
	// (DELETE /snippets/{id})
	DeleteSnippet(w http.ResponseWriter, r *http.Request, id string, params DeleteSnippetParams)
	// Get a snippet
	// (GET /snippets/{id})
	GetSnippet(w http.ResponseWriter, r *http.Request, id string, params GetSnippetParams)
	// Update a snippet
	// (PUT /snippets/{id})
	UpdateSnippet(w http.ResponseWriter, r *http.Request, id string, params UpdateSnippetParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateSnippet operation middleware
func (siw *ServerInterfaceWrapper) CreateSnippet(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSnippet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSnippet operation middleware
func (siw *ServerInterfaceWrapper) DeleteSnippet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteSnippetParams

	headers := r.Header

	// ------------- Required header parameter "X-Edit-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Edit-Token")]; found {
		var XEditToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Edit-Token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Edit-Token", valueList[0], &XEditToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Edit-Token", Err: err})
			return
		}

		params.XEditToken = XEditToken

	} else {
		err := fmt.Errorf("Header parameter X-Edit-Token is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "X-Edit-Token", Err: err})
		return
	}

	// ------------- Optional header parameter "X-Snippet-Password" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Snippet-Password")]; found {
		var XSnippetPassword string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Snippet-Password", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Snippet-Password", valueList[0], &XSnippetPassword, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Snippet-Password", Err: err})
			return
		}

		params.XSnippetPassword = &XSnippetPassword

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSnippet(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSnippet operation middleware
func (siw *ServerInterfaceWrapper) GetSnippet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSnippetParams

	headers := r.Header

	// ------------- Optional header parameter "X-Snippet-Password" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Snippet-Password")]; found {
		var XSnippetPassword string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Snippet-Password", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Snippet-Password", valueList[0], &XSnippetPassword, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Snippet-Password", Err: err})
			return
		}

		params.XSnippetPassword = &XSnippetPassword

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSnippet(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateSnippet operation middleware
func (siw *ServerInterfaceWrapper) UpdateSnippet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateSnippetParams

	headers := r.Header

	// ------------- Required header parameter "X-Edit-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Edit-Token")]; found {
		var XEditToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Edit-Token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Edit-Token", valueList[0], &XEditToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Edit-Token", Err: err})
			return
		}

		params.XEditToken = XEditToken

	} else {
		err := fmt.Errorf("Header parameter X-Edit-Token is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "X-Edit-Token", Err: err})
		return
	}

	// ------------- Optional header parameter "X-Snippet-Password" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Snippet-Password")]; found {
		var XSnippetPassword string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Snippet-Password", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Snippet-Password", valueList[0], &XSnippetPassword, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Snippet-Password", Err: err})
			return
		}

		params.XSnippetPassword = &XSnippetPassword

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSnippet(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/snippets", wrapper.CreateSnippet)
	m.HandleFunc("DELETE "+options.BaseURL+"/snippets/{id}", wrapper.DeleteSnippet)
	m.HandleFunc("GET "+options.BaseURL+"/snippets/{id}", wrapper.GetSnippet)
	m.HandleFunc("PUT "+options.BaseURL+"/snippets/{id}", wrapper.UpdateSnippet)

	return m
}
